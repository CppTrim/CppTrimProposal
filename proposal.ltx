\documentclass[10pt,a4paper,article]{memoir}

\newcommand\documentnumber{DXXXX}

\usepackage{geometry}
\geometry{a4paper}
\usepackage{fontspec}
\usepackage{hyperref}
\usepackage{xcolor}
\usepackage{ulem}
\usepackage{underscore}
\usepackage{xspace}
\usepackage{enumitem}
\usepackage{listings}
\usepackage[yyyymmdd]{datetime}
\renewcommand\dateseparator{-}
\usepackage{biblatex}
\addbibresource{proposal.bib}
\pagestyle{myheadings}
\markboth{\documentnumber}{\documentnumber}
\input{macros}

\title{Trimming strings}
\author{Russel Winder, Anthony Williams, Emyr Williams}
\date{}

\setsecnumdepth{subsection}

\setmainfont{Liberation Serif}
\setsansfont{Liberation Sans}
\setmonofont{Liberation Mono}

\begin{document}

\maketitle

\begin{tabularx}{\textwidth}{|l|X|}
  \hline
  Document Number: &  \documentnumber\\
  \hline
  Date: & \today \\
  \hline
  Project: & Programming Language C++\\
  \hline
  Reply To: & Russel Winder\hfill \href{mailto:russel@winder.org.uk}{<russel@winder.org.uk>}\\
                   & Anthony Williams\hfill \href{mailto:anthony@justsoftwaresolutions.co.uk}{<anthony@justsoftwaresolutions.co.uk>}\\
                   & Emyr Williams\\
  \hline
\end{tabularx}

\tableofcontents

\chapter{Introduction}
\label{sec:introduction}

This proposal presents facilities to trim leading and trailing characters
(whitespace usually and by default) from strings. Characters can be trimmed
from the left or right of the string, either in-place, or by returning a new
string which is a copy of the original, but trimmed. The set of characters can
either be implicit (using \texttt{std::isspace}), or specified as those defined by a
locale, those from a specific list, or with a custom predicate to identify
whitespace.

The ``strings'' are not limited to \texttt{std::string}: any container of
characters can be used.

\chapter{Motivation}
\label{sec:motivation}

Removing whitespace from strings is a common requirement in code and facility in
many programming languages. The omission of this from C++ is surprising and
frustrating, leading to many disparate implementations. Boost has provided
string trimming functions for a number of years, and these are widely
used. However the Boost functions have not migrated into the standard library.

This proposal is a new implementation for the C++17 standard inspired by the
Boost implementation\cite{BoostTrim}, and also facilities in Rust and Python,
but is designed and implemented from scratch.

\chapter{Impact on the Standard}
\label{sec:impact}

Some new function templates are added, along with supporting concepts.

\chapter{Design Decisions}
\label{sec:design}

\section{Identifying characters to trim}
\label{sec:characterstotrim}

For a large number of users, ``whitespace'' means spaces and tabs only;
certainly, the characters identified as whitespace by \texttt{std::isspace} are
sufficient. This is thus the set of characters used by the functions proposed
here, when no other source of whitespace characters is specified.

However, this is insufficent for many users. This proposal therefore expands on
this to allow the user to provide the set of whitespace characters to consider
in 3 additional ways:

\begin{enumerate}
\item By locale: the Boost trim functions allow specifying a locale, and the
  functions in this proposal do too. If a \texttt{std::locale} object is supplied, then the relevant
  \texttt{std::ctype} facet from that locale is used to identify whitespace
  characters.
\item With an explicit list: instead of a locale, the user can supply a list
  of those characters they wish to trim. This allows the list to be fully
  customized in an application-specific fashion.
\item With a predicate: inspired by the Rust trim functions, the user can supply
  a predicate for the trim functions to use when determining whether or not to
  trim a given character. This thus provides users with the maximum possible
  flexibility, and allows them to use any available mechanism to identify those
  characters.
\end{enumerate}

\section{In place versus copying}
\label{sec:inplacevscopy}

For many use cases, it is desirable to be able to trim strings in place since
doing so avoids additional memory allocations. However, this can lead to
additional unnecessary copying if the string to be trimmed cannot be modified:
first the entire source string must be copied, and then trimmed. This proposal
therefore offers two versions of each trim function: one which trims in place,
and one which creates a new string.

The in-place functions support any iterable container that holds a suitable
character type, and supports erasing a range specified by a pair of iterators.

The copy functions require instead that the container is a type that supports
construction from a pair of iterators.

\section{String Views}
\label{sec:stringviews}

\texttt{std::string_view} is not a container. Therefore in-place trimming cannot
work. Nor is it constructible from a pair of iterators, since it requires
contiguous storage, so it doesn't work with the ``normal'' \texttt{trim_copy}
functions defined in this proposal. However, trimming string views is expected
to be a common request. Therefore this proposal provides additional overloads of
the \texttt{trim_copy} functions that take a
\texttt{std::basic_string_view<CharType>} and return a
\texttt{std::basic_string<CharType>}. The returned string is thus a copy of the
original.

Use cases for additional functions that provide a trimmed view of the original
can be envisaged, but are not proposed at this time.
\chapter{Technical Specifications}
\label{sec:spec}

Add a new header to table 53:

\begin{tabularx}{\textwidth}{|X|l|}
\hline
\textbf{Subclause} & \textbf{Header} \\
  \hline
\added{24.x String trimming utilities} & \added{\texttt{<trim>}}\\
\hline
\end{tabularx}

Add a new subclause to clause 24 [strings] as follows:

\begin{addedblock}
  \Sec1[string.trim]{String trimming utilities}
  \label{sec:spec:string.trim}

  \Sec2[string.trim.syn]{Header \texttt{<trim>} synopsis}
  \label{sec:spec:string.trim.syn}

  \begin{lstlisting}
namespace std{
template <typename Container>
requires StringContainer<Container>
void trim_left(Container &s);

template <typename Container>
requires StringContainer<Container>
void trim_left(Container &s,std::locale& loc);

template <typename Container, typename CharacterList>
requires StringContainer<Container> && BasicContainer<CharacterList>
void trim_left(Container &s, CharacterList &&chars);

template <typename Container, typename Predicate>
requires StringContainer<Container> &&
    WhitespacePredicate<Predicate, typename Container::value_type>
void trim_left(Container &s, Predicate &&pred);

template <typename Container>
requires StringContainer<Container>
void trim_right(Container &s);

template <typename Container>
requires StringContainer<Container>
void trim_right(Container &s,std::locale& loc);

template <typename Container, typename CharacterList>
requires StringContainer<Container> && BasicContainer<CharacterList>
void trim_right(Container &s, CharacterList &&chars);

template <typename Container, typename Predicate>
requires StringContainer<Container> && 
    WhitespacePredicate<Predicate, typename Container::value_type>
void trim_right(Container &s, Predicate &&pred);

template <typename Container>
requires StringContainer<Container>
void trim(Container &s);

template <typename Container>
requires StringContainer<Container>
void trim(Container &s,std::locale& loc);

template <typename Container, typename CharacterList>
requires StringContainer<Container> && BasicContainer<CharacterList>
void trim(Container &s, CharacterList &&chars);

template <typename Container, typename Predicate>
requires StringContainer<Container> &&
    WhitespacePredicate<Predicate, typename Container::value_type>
void trim(Container &s, Predicate &&pred);

}
  \end{lstlisting}

\end{addedblock}


\chapter{Acknowledgements}
\label{sec:acknowledgements}

\label{sec:references}
\printbibliography

\end{document}

% Local Variables:
% fill-column: 80
% End:
